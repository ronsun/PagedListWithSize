@using PagedList;
@using PagedList.Mvc;
@using PagedListWithSize.Helpers.CustomizeHtmlHelpers;
@using PagedListWithSize.Models.Home;

@model SampleVM

@{
    Func<int, string> _generatePageUrl = page => Url.Action("SampleByHtmlHelper", new RouteValueDictionary()
    {
        ["PageNumber"] = page,
        ["PageSize"] = Model.PagedList.PageSize,
        ["EndWith"] = Model.Filters.EndWith,
    });

    Func<int, string> _generateSizeUrl = size => Url.Action("SampleByHtmlHelper", new RouteValueDictionary()
    {
        ["PageSize"] = size,
        ["EndWith"] = Model.Filters.EndWith,
    });
}

@Styles.Render("~/Content/PagedList.css")
@Styles.Render("~/Content/PagedListWithSize.css")

<h2>Traditional Paging</h2>

<p>Example of paging a list:</p>

@Html.PagedListGoToPageForm((IPagedList)Model.PagedList, Url.Action("SampleByHtmlHelper"))

@using (Html.BeginForm("SampleByHtmlHelper", "Home", FormMethod.Post))
{
    <fieldset>
        <label for="PageNumber">EndWith:</label>
        @Html.TextBoxFor(r => r.Filters.EndWith)
        <input type="submit" value="Go">
    </fieldset>
}

<h3>List of @Model.PagedList.TotalItemCount Names (Page Size: @Model.PagedList.PageSize, Current Page: @Model.PagedList.PageNumber)</h3>
<ol start="@Model.PagedList.FirstItemOnPage">
    @foreach (var i in (IPagedList<string>)Model.PagedList)
    {
        <li>@i</li>
    }
</ol>

<h2>Out-of-the-box Pager Configurations</h2>

<h3>Default Paging Control</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl)

<h3>Classic Paging Control (always shows Previous/Next links, but sometimes they are disabled)</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.Classic)

<h3>Classic Paging Control (Classic +First and Last links)</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.ClassicPlusFirstAndLast)

<h3>Minimal Paging Control</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.Minimal)

<h3>Minimal Paging Control w/ Page Count Text</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.MinimalWithPageCountText)

<h3>Minimal Paging Control w/ Item Count Text</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.MinimalWithItemCountText)

<h3>Page Numbers Only</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.PageNumbersOnly)

<h3>Only Show Five Pages At A Time</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, PagedListRenderOptions.OnlyShowFivePagesAtATime)

<h2>Custom Pager Configurations</h2>

<h3>Custom Wording (<em>Spanish Translation Example</em>)</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, new PagedListRenderOptions { LinkToFirstPageFormat = "<< Primera", LinkToPreviousPageFormat = "< Anterior", LinkToNextPageFormat = "Siguiente >", LinkToLastPageFormat = "Última >>" })

<h3>Show Range of Items For Each Page</h3>
@Html.PagedListPagerWithSize((IPagedList)Model.PagedList, _generatePageUrl, _generateSizeUrl, new PagedListRenderOptions { FunctionToDisplayEachPageNumber = page => ((page - 1) * Model.PagedList.PageSize + 1).ToString() + "-" + (((page - 1) * Model.PagedList.PageSize) + Model.PagedList.PageSize).ToString(), MaximumPageNumbersToDisplay = 5 })

<h3>Empty PagedList</h3>
@Html.PagedListPagerWithSize(new string[0].ToPagedList(1, 10), _generatePageUrl, _generateSizeUrl)